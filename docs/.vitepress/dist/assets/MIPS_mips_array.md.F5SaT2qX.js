import{_ as s,a as i,b as a}from"./chunks/mips2-image-0006.CZA_zZMk.js";import{_ as n,c as l,o as t,a4 as p}from"./chunks/framework.DRnJpP2i.js";const C=JSON.parse('{"title":"MIPS Arrays","description":"","frontmatter":{},"headers":[],"relativePath":"MIPS/mips_array.md","filePath":"MIPS/mips_array.md"}'),h={name:"MIPS/mips_array.md"},e=p(`<h1 id="mips-arrays" tabindex="-1">MIPS Arrays <a class="header-anchor" href="#mips-arrays" aria-label="Permalink to &quot;MIPS Arrays&quot;">​</a></h1><h2 id="integer-arrays" tabindex="-1">Integer Arrays <a class="header-anchor" href="#integer-arrays" aria-label="Permalink to &quot;Integer Arrays&quot;">​</a></h2><p>An Integer Array is continuous storage block in memory in which each element is an integer. Each element of an array is accessed using the base address of the array and the index of the element we must access.</p><h3 id="declaration-and-initialization" tabindex="-1">Declaration and Initialization <a class="header-anchor" href="#declaration-and-initialization" aria-label="Permalink to &quot;Declaration and Initialization&quot;">​</a></h3><p>Integer arrays can be initialized using .word or an empty array can be declared using the .space keyword inside the .data section of the program</p><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arr:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">word</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    #initialized an array arr=[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arr2:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .space </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # empty array with 40 bytes reserved for arr2</span></span></code></pre></div><h3 id="array-traversal" tabindex="-1">Array Traversal <a class="header-anchor" href="#array-traversal" aria-label="Permalink to &quot;Array Traversal&quot;">​</a></h3><p>Array traversal refers to accessing each element of the array using its index.</p><p>Each integer element of an array occupies a word (4 bytes). Therefore,4 bytes needed to be added to the current address to obtain the address of the following element.</p><p><em>Address of arr [k] = base address of arr + 4 * k</em></p><p>Eg: To access arr[3] and store it to $t</p><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a $s0,arr  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # base add address of array is stored in $s0 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">addi $s0,$s0,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #  $s0 = address of arr[3] = arr + 4 * 3 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lw $t2,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($s0)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $t2=arr[3]</span></span></code></pre></div><p>or</p><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a $s0,arr  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # base add address of array is stored in $s0 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lw $t2,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($s0) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $t2=value of (arr + 12)</span></span></code></pre></div><h3 id="array-input" tabindex="-1">Array Input <a class="header-anchor" href="#array-input" aria-label="Permalink to &quot;Array Input&quot;">​</a></h3><p>The elements of an integer array can be received from the user using the syscall for integer input and a for loop.</p><p><em>An empty array must be declared in the <code>.data</code> by allocating the necessary space as shown before.</em></p><p><em>Each integer element of an array occupies 4 bytes. Therefore, 4 bytes needed to be added to the current address after each insertion.</em></p><p>The following code segment can be used to create an array of size n by receiving inputs from the user:</p><p>Assume <code>$s1</code> contains n, <code>$s0</code> contains base address of an empty array and $t0 is the loop counter</p><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">for:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  beq $t0,$s1,exit     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # loop termination condition </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  sll $t1,$t0,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # $t1=i*4 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $t1,$t1,$s0  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $t1 = arr + i * 4         </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           # input integer and store in $t2 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  move $t2,$v0 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  sw $t2,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($t1)     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $t2 = arr[i] </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  addi $t0,$t0,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # increment loop counter i </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  j for</span></span></code></pre></div><h3 id="printing-an-integer-array" tabindex="-1">Printing an Integer Array <a class="header-anchor" href="#printing-an-integer-array" aria-label="Permalink to &quot;Printing an Integer Array&quot;">​</a></h3><p>Integer Array can be printed by traversing each element by using array traversal rules (as discussed above) and integer printing (code 1 is loaded to <code>$v0</code>).</p><p>Consider the following code snippet to print the array created in the previous example in which every element is provided by the user:</p><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">la $s0,arr            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # store base address of array in $s0 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li $t0,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  beq $t0,$s1,end  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  sll $t1,$t0,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # array traversal to access arr[i] </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $t1,$t1,$s0 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  lw $t2,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($t1)      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $t2=arr[i] </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # 1 is the syscall number to print integers </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  move $a0,$t2        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # print $t2   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $a0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">32</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 32 is the ASCII code for space  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # syscall number for printing character </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  addi $t0,$t0,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # increment loop counter </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  j print </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                         </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li $v0,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   #end program        </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">syscall</span></span></code></pre></div><h3 id="negative-numbers-as-elements" tabindex="-1">Negative Numbers as Elements <a class="header-anchor" href="#negative-numbers-as-elements" aria-label="Permalink to &quot;Negative Numbers as Elements&quot;">​</a></h3><p>All integer operations in MIPS support both positive and negative numbers. No changes are required to the program for the input and output of positive integers.</p><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> array </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">element:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> array </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">element:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> array </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">element:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> array </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">element:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">The elements of the array </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">are:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-- program is finished running --</span></span></code></pre></div><h3 id="floating-point-numbers-as-elements" tabindex="-1">Floating Point Numbers as Elements <a class="header-anchor" href="#floating-point-numbers-as-elements" aria-label="Permalink to &quot;Floating Point Numbers as Elements&quot;">​</a></h3><p>An array of floating-point numbers can be created by replacing all the integer operations with floating-point operations. The following changes need to be made to convert an integer array into an array of floating-point numbers:</p><ol><li>Replace the integer code loaded to $v0 by floating-point code</li><li>Replace the load, store and move operation by l.s , s.s and mov.s where floating point data type is used</li></ol><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># program to input array </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">for:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  beq $t0,$s1,exit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  sll $t1,$t0,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $t1,$t1,$s0  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # code for floating point input </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  s.s $f0,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($t1)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # arr[i]=$f0 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  addi $t0,$t0,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  j for  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># print array </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  beq $t0,$s1,end  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  sll $t1,$t0,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $t1,$t1,$s0 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  l.s $f0,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($t1)      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $f0=arr[i] </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           # code for printing floating point </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  mov</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.s $f12,$f0   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $a0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  addi $t0,$t0,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  j print </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">end</span></span></code></pre></div><h2 id="one-dimensional-arrays" tabindex="-1">One Dimensional Arrays <a class="header-anchor" href="#one-dimensional-arrays" aria-label="Permalink to &quot;One Dimensional Arrays&quot;">​</a></h2><h3 id="to-calculate-the-sum-of-n-numbers-in-an-n-sized-array" tabindex="-1">To calculate the sum of n numbers in an n sized array <a class="header-anchor" href="#to-calculate-the-sum-of-n-numbers-in-an-n-sized-array" aria-label="Permalink to &quot;To calculate the sum of n numbers in an n sized array&quot;">​</a></h3><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li $t0,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">la $s0,arr </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li $t3,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        #t3 stores the sum </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          #for </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">loop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  beq $t0,$s1,end    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $s1 contains n </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  sll $t1,$t0,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $t1,$t1,$s0 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  lw $t2,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($t1)     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $t2=arr[i] </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $t3,$t3,$t2   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $t3=$t3+$t2 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  addi $t0,$t0,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # increment loop counter </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  j sum </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li $v0,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              # print sum </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">move $a0,$t3                 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">syscall</span></span></code></pre></div><h3 id="to-find-the-largest-element-in-an-n-sized-array" tabindex="-1">To find the largest element in an n sized array <a class="header-anchor" href="#to-find-the-largest-element-in-an-n-sized-array" aria-label="Permalink to &quot;To find the largest element in an n sized array&quot;">​</a></h3><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">la $s0,arr </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li $t0,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li $t3,-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $t3=max </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # initialized to -1000   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  beq $t0,$s1,end</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $s1 contains n </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  sll $t1,$t0,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $t1,$t1,$s0 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  lw $t2,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($t1) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $t2=arr[i] </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ble $t2,$t3,inc_i </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # if arr[i]&lt;=max, jump to inc_count </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  move $t3,$t2  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # if arr[i]&gt;max, max=arr[i] </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  inc_count:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    addi $t0,$t0,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # increment loop counter </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    j max </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li $v0,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  # print max </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">move $a0,$t3                 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">syscall</span></span></code></pre></div><h2 id="two-dimensional-arrays" tabindex="-1">Two Dimensional Arrays <a class="header-anchor" href="#two-dimensional-arrays" aria-label="Permalink to &quot;Two Dimensional Arrays&quot;">​</a></h2><p>2-DArrays/Matrices/Tables aren’t stored in memory the way it is normally visualized; rather it is stored as a single array in either row major form or column major form. Let’s see how a matrix is represented in memory in both the forms with a starting address of 1230. (Remember:In an array each element is 4 bytes long).</p><p>a) Row Major form : Here elements are stored row wise. First we store the first row, then the second and soon.</p><img src="`+s+'"><p>b) Column Major form: Here elements are stored column wise. First we store the first column, then the second and soon.</p><p>Row Major form ( starting address 1000 )</p><img src="'+i+'"><p>Column Major form ( starting address 1000 )</p><img src="'+a+`"><h3 id="sample-code" tabindex="-1">Sample code <a class="header-anchor" href="#sample-code" aria-label="Permalink to &quot;Sample code&quot;">​</a></h3><p><em>-&gt;Insertion of elements and printing the 2D-array</em></p><p><em>We are using row major form to input the elements as a string</em></p><p><em>NOTE: all characters need to be space separated, the end of the sequence also need to have a space</em></p><h3 id="pseudo-code" tabindex="-1">Pseudo code <a class="header-anchor" href="#pseudo-code" aria-label="Permalink to &quot;Pseudo code&quot;">​</a></h3><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Prompt user for number of rows </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> columns</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Initialize </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> array</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Prompt user to </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matrix values as a string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Loop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> through input </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- Extract numbers delimited by spaces</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- Convert </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">each</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> substring to integer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> store </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> the </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> array</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Print the </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matrix:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Loop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> through </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rows:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Loop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> through </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">columns:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- Print </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">each</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element of the matrix</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- Print a space between elements</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- Print a newline after </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">each</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> row</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Exit the program</span></span></code></pre></div><h3 id="mips-code" tabindex="-1">MIPS Code <a class="header-anchor" href="#mips-code" aria-label="Permalink to &quot;MIPS Code&quot;">​</a></h3><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.data</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newline:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .asciiz &quot;\\n&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">space:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .asciiz &quot; &quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">msg_rows:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .asciiz &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Enter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number of rows : &quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">msg_columns:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .asciiz &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Enter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number of columns : &quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">msg_input:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .asciiz &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Enter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matrix ( row major form ) : &quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mat1:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .space </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">input:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .space </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.text</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $a0, msg_rows</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  move $t0, $v0        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $t0 = number of rows</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $a0, msg_columns</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  move $t1, $v0        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $t1 = number of columns</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $a0, msg_input</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # syscall for read_str</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $a0, input</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Load address of input buer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $a1, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Maximum length</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $t2, input</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $t3, mat1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $t5, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # t2 - address of input string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # t3 - address of matrix</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # t4 - used to iterate through string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # t5 - used to calculate number</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">input_loop:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  lb $t4, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($t2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  beq $t4, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, store</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># when a space is detected add the number calculated to the array and continue</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  beq $t4, $zero , end_input</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">In</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ASCII encoding, the decimal value </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> corresponds to the space character (&#39; &#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#This </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">loop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exist to calculate numbers that have more than one digit , since our input is a string.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># We need to iterate and add the characters until we detect a space</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  sub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $t6 , $t4, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">48</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # converts character to integer</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># for calculating the number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  mul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $t5, $t5, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $t5, $t5, $t6</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  addi $t2, $t2, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  j input_loop</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">store:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  sw $t5, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($t3) #store the number obtained </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> the </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-array</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  addi $t3, $t3, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> #increment the address to next memory block</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $t5, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $t2 , $t2 , </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> #increment the index of string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  j input_loop #</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">loop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> back to the input to continue iteration of string</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">end_input :</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $t6 , </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Initialize row index</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $t8, mat1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Load address of array for printing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $a0, newline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print_loop:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  beq $t6 , $t0 , end_programme</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $t7 , </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Initialize column index</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print_column_loop:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  lw $t9 , </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($t8)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Load number from array</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # syscall for print_int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  move $a0, $t9</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Load number to print</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # syscall for print_str </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $a0, space</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Load address of space</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  addi $t7, $t7, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Increment column index</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  addi $t8 , $t8 , </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Increment base address</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  blt $t7, $t1 , print_column_loop</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Print all elements in the row</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Print newline after each row</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0 , </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $a0 , newline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Reset column index for next row</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $t7 , </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Increment row index</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  addi $t6 , $t6 , </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  j print_loop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">end_programme :</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # syscall for exit</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span></code></pre></div><h3 id="output" tabindex="-1">Output <a class="header-anchor" href="#output" aria-label="Permalink to &quot;Output&quot;">​</a></h3><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Enter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number of </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rows:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Enter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number of </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">columns:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Enter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matrix(row major form) : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9</span></span></code></pre></div><h3 id="to-find-maximum-and-minimum-element-in-a-2-d-array" tabindex="-1">To find maximum and minimum element in a 2-D array <a class="header-anchor" href="#to-find-maximum-and-minimum-element-in-a-2-d-array" aria-label="Permalink to &quot;To find maximum and minimum element in a 2-D array&quot;">​</a></h3><p>We are using row major form to input the elements as a string</p><p>same process of taking the input as the above</p><p><strong>NOTE: all characters need to be space separated, the end of the sequence also need to have a space</strong></p><h4 id="pseudo-code-1" tabindex="-1">Pseudo code <a class="header-anchor" href="#pseudo-code-1" aria-label="Permalink to &quot;Pseudo code&quot;">​</a></h4><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Prompt user for number of rows </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> columns</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Initialize </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> array</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Prompt user to </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matrix values as a string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Loop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> through input </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- Extract numbers delimited by spaces</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- Convert </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">each</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> substring to integer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> store </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> the </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2D</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">array</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Find minimum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maximum elements </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> the </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matrix:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- Initialize minimum element to maximum possible value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maximum element to </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Loop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> through </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">each</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element of the </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matrix:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- Update minimum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maximum elements if necessary</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Print the maximum element </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">message:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- Print &quot;The maximum element </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">is:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- Print the maximum element</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Print the minimum element </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">message:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- Print &quot;The minimum element </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">is:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- Print the minimum element</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Exit the program</span></span></code></pre></div><h3 id="mips-code-1" tabindex="-1">MIPS Code <a class="header-anchor" href="#mips-code-1" aria-label="Permalink to &quot;MIPS Code&quot;">​</a></h3><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.data</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newline:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .asciiz &quot;\\n&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">space:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .asciiz &quot; &quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">msg_rows:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .asciiz &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Enter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number of rows : &quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">msg_columns:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .asciiz &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Enter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number of columns : &quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">msg_input:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .asciiz &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Enter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matrix ( row major form ) : &quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">maximum : .asciiz&quot;The maximum element is : &quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">minimum : .asciiz&quot;The minimum element is :</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mat1:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .space </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">input:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .space </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.text</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $a0, msg_rows</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  move $t0, $v0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $t0 = number of rows</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $a0, msg_columns</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  move $t1, $v0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $t1 = number of columns</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $a0, msg_input</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # syscall for read_str</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $a0, input</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Load address of input buer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $a1, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Maximum length</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $t2, input</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $t3, mat1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $t5, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # t2 - address of input string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # t3 - address of matrix</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # t4 - used to iterate through string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # t5 - used to calculate number</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">input_loop:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  lb $t4, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($t2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  beq $t4, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, store</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # when a space is detected add the number calculated to the array and continue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  beq $t4, $zero , end_input</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">In</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ASCII encoding, the decimal value </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> corresponds to the space character (&#39; &#39;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #This </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">loop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exist to calculate numbers that have more than one digit , since our input is a string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # we need to iterate and add the characters until we detect a space</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  sub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $t6 , $t4, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">48</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # converts character to integer</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # for calculating the number</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  mul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $t5, $t5, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $t5, $t5, $t6</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  addi $t2, $t2, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  j input_loop</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">store:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  sw $t5, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($t3) #store the number obtained </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> the </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-array</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  addi $t3, $t3, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> #increment the address to next memory block</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $t5, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $t2 , $t2 , </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> #increment the index of string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  j input_loop #</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">loop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> back to the input to continue iteration of string</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">end_input :</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $t6 , </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Initialize row index</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $t8, mat1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Load address of array for printing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $a0, newline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find_min_max:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $t3 , </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Initialize max element to 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $t2 , </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xffffffff</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $t6 , </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Initialize row index to 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $a0 , mat1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">row_loop:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  beq $t6, $t0 , end</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # If all rows have been checked, exit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $t7, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Initialize column index to 0 </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">column_loop:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  beq $t7, $t1 , end_column_loop</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # If all columns have been checked, move to next row</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  lw $t8, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($a0)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Load current element from array</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Compare current element with max element and the min element</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  bgt $t8, $t3, update_max</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # if element greater than max element , update max</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  min :</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  blt $t8 , $t2 , update_min</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # if element smaller than min element, update min</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  increment :</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  addi $a0, $a0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Move to next column</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  addi $t7, $t7, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Increment column index</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  j column_loop</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update_max:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  move $t3 , $t8</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Update max element</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  j min</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # control goes back to checking for the conditional statement of min element</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update_min:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  move $t2 , $t8</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Update min element</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  j increment</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # control goes back to incrementing the looping values</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">End_column_loop:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  addi $t6, $t6, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Increment row index</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  j row_loop</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">end :</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0 , </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $a0 , maximum  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0 , </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  move $a0 , $t3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # printing the maximum element</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0 , </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $a0 , newline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0 , </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $a0 , minimum</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # printing the minimum element</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0 , </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  move $a0 , $t2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0 , </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span></code></pre></div><h3 id="output-1" tabindex="-1">Output <a class="header-anchor" href="#output-1" aria-label="Permalink to &quot;Output&quot;">​</a></h3><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Enter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number of rows :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Enter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number of columns :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Enter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matrix ( row major form ) : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 34</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 300</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 22</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  The maximum element is : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  The minimum element is : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre></div><h3 id="more-questions" tabindex="-1">More Questions <a class="header-anchor" href="#more-questions" aria-label="Permalink to &quot;More Questions&quot;">​</a></h3><p><em>-&gt;Searching in Matrix: Write a MIPS assembly program to search for a given element in a matrix and return its position if found.</em></p><p><em>-&gt;Matrix Addition: Write a MIPS program to add two matrices of the same size</em></p><p><em>-&gt;Transpose of a Matrix: Write a MIPS assembly program to find the transpose of a given matrix.</em></p>`,70),k=[e];function r(E,d,g,y,c,o){return t(),l("div",null,k)}const u=n(h,[["render",r]]);export{C as __pageData,u as default};
