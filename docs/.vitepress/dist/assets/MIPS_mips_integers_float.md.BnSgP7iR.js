import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.DRnJpP2i.js";const c=JSON.parse('{"title":"MIPS INteger and Floating Point Numbers","description":"","frontmatter":{},"headers":[],"relativePath":"MIPS/mips_integers&float.md","filePath":"MIPS/mips_integers&float.md"}'),t={name:"MIPS/mips_integers&float.md"},e=n(`<h1 id="mips-integer-and-floating-point-numbers" tabindex="-1"><strong>MIPS INteger and Floating Point Numbers</strong> <a class="header-anchor" href="#mips-integer-and-floating-point-numbers" aria-label="Permalink to &quot;**MIPS INteger and Floating Point Numbers**&quot;">​</a></h1><h2 id="integer-handling" tabindex="-1"><strong>Integer Handling</strong> <a class="header-anchor" href="#integer-handling" aria-label="Permalink to &quot;**Integer Handling**&quot;">​</a></h2><p>Unlike NASM where numbers are stored as characters, MIPS can store single or multiple digit integers directly. This chapter describes how to read and print integers. Basic operations in integer handling (add, sub, mul, div) will also be covered.</p><p><strong>1. Declaring an integer</strong></p><p>Integers can be declared as constants in the ‘.data’ section as shown below:</p><p><em>Code to declare constants ‘x’ and ‘y’ with values 30 and 40 respectively:</em></p><div class="language-v vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">v</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.data </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x: .word </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y: .word </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span></span></code></pre></div><p><strong>2. Loading an integer value into a register</strong></p><p>Another way of using integers in MIPS is to read their values into temporary registers using ‘I’ type instructions. The two commonly used methods of reading integer values are:</p><ol><li>Loading a value into a temporary register.</li><li>Adding the value of the zero register and any value into a temporary register.</li></ol><p><em>Code to enter integer values 5 and 10 using add and load instructions respectively into temporary registers:</em></p><div class="language-v vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">v</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.text </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">addi  $t</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, $</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li $t</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span></code></pre></div><p><strong>3. Reading integers as input from the user</strong></p><p>Integers can be read from the user using <em>syscall</em> (system call) instructions. The system call code for reading an integer is ‘5’. This syscall code value must be loaded into the register $v0 in order to perform its designated function. The input is then stored in $v0.</p><p><em>Code to read an integer input from the user:</em></p><div class="language-v vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">v</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.text </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li $v</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">syscall</span></span></code></pre></div><p><strong>4. Printing integers</strong></p><p>Integers stored in registers can also be printed using syscall instructions. The system call code for printing an integer is ‘1’. This syscall code value must be loaded into the register $v0 in order to perform its designated function. The integer to be printed must be stored in the $a0 register.</p><p><em>Code to print the integer ‘5’ after storing it in a register:</em></p><div class="language-v vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">v</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.text </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li $a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li $v</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">syscall</span></span></code></pre></div><p>We have now learnt how to store single and multi digit integers and how to print their values. We shall now combine all of these into a single program for a more robust understanding of the covered concepts.</p><p><em>Code to declare a constant x with value 10, load values 20 and 30 into two registers and read an integer value from the user and print all these values:</em></p><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">word</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">addi $t0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   #load value </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li $t1, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    #load value </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     #read integer input</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">move  $t2, $v0   #move integer input </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lw $a0, x     #print x </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">move $a0, $t0    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     #print value of $t0  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">move $a0, $t1   #print value of $t1 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">move $a0, $t2   #print integer input </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    #exit program </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">syscall</span></span></code></pre></div><p><em>Output:</em><em>Assume the value ‘5’ is entered by the user as input.</em></p><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1020305</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-- program is finished running --</span></span></code></pre></div><p><strong>5. Adding integers</strong></p><p>Integers can be added in two ways, either by adding fixed or immediate values to an integer value stored in a register, or by adding two integers that are both stored in registers. Both methods to add integers are demonstrated below:</p><p><em>Code to add integer values stored in registers:</em></p><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">addi  $t0, $t1, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   #t0=t1+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $t2, $t2, $t1   #t2=t2+t1 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">addi  $t1, $zero, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   #t1=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   $t2, $zero, $t1    #t2=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+t1</span></span></code></pre></div><p><strong>6. Subtracting integers</strong></p><p>Unlike addition, values can only be subtracted if they are stored in a register.</p><p><em>Code to subtract integer values stored in registers:</em></p><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $t2, $t2, $t1   #t2=t2-t1    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   $t2, $zero, $t1    #t2=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-t1</span></span></code></pre></div><p><strong>7. Multiplying integers</strong></p><p>MIPS allows you to multiply the values present in two registers and stores the 32 most significant bits in the HI special register and the 32 least significant bits in the LO special register.</p><p>The value obtained in the HI and LO registers can be accessed using the mfhi and mflo instructions respectively.</p><p><em>Code to multiply two integers values and access the result after multiplication:</em></p><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mult  $t0, $t1     #signed mult </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mflo  $s0     #s0=t0*t1 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">multu $t2, $t3    #unsigned mult  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mflo  $s1     #s1=t2*t3</span></span></code></pre></div><p><strong>8. Dividing integers</strong></p><p>Division in MIPS is similar to multiplication except for a key difference, the HI special register stores the remainder while the LO special register will hold the quotient of the division.</p><p><em>Code to divide to integers and access the remainder and quotient after division:</em></p><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $t1, $t2    #signed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mfhi  $s0     #s0=t1%t2 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mflo  $s1     #s1=t1/t2 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">divu  $t3, $t4    #unsigned </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mfhi  $s2     #s2=t3%t4 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mflo  $s3      #s3=t3/t4</span></span></code></pre></div><h3 id="points-to-note" tabindex="-1"><strong>Points To Note</strong> <a class="header-anchor" href="#points-to-note" aria-label="Permalink to &quot;**Points To Note**&quot;">​</a></h3><p><strong>1.</strong> Entering number of size larger than 32 bits The largest integer that can be entered in 32 bit space is 2,147,483,647. Entering a number larger than that results in the following error:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Runtime exception at 0x0040002c: invalid integer input (syscall 5)</span></span></code></pre></div><p><strong>2.</strong> Changing the value of $zero register It is not possible to change the value of the $zero register, any instructions that attempt to alter the value have no effect.</p><p><strong>3.</strong> Multiplying numbers of size 32 bits In MIPS, all integer values must be 32 bits. So if there is a valid answer, it must be contained in the lower 32 bits of the answer. Thus to implement multiplication in MIPS, the two numbers must be multiplied using the mult operator, and the valid result moved from the lo register.</p><p><strong>4.</strong> Division by zero If the divisor is zero, then the MIPS divide instructions do not compute any result in the HI and LO registers. Division by zero is ignored and no exception is produced.</p><p><strong>5.</strong> Meaning of the <em>.word</em> directive The <em>.word</em> directive allocates 4 bytes of space in the data region. The .word directive can then be given an integer value, and it will initialize the allocated space to that integer value. Be careful as it is incorrect to think of a the .word directive as a declaration for an integer, as this directive simply allocates and initializes 4 bytes of memory, it is not a data type. What is stored in this memory can be any type of data.</p><h2 id="floating-point-numbers" tabindex="-1"><strong>Floating Point Numbers</strong> <a class="header-anchor" href="#floating-point-numbers" aria-label="Permalink to &quot;**Floating Point Numbers**&quot;">​</a></h2><p>Floating point numbers are stored according to the IEEE 754 Standard. There are 2 types of floating point numbers, single precision and double precision.</p><h3 id="floating-point-number-representation" tabindex="-1"><strong>Floating point number representation</strong> <a class="header-anchor" href="#floating-point-number-representation" aria-label="Permalink to &quot;**Floating point number representation**&quot;">​</a></h3><p>According to IEE 754 Standard, floating point numbers follow the given representation.</p><p><code>Sign Exponent Fraction</code></p><ul><li><p>The sign bit is 0 or 1, for positive or negative respectively.</p></li><li><p>The exponent stores the exponent of the number in scientific notation of its binary representation, plus a bias.</p></li><li><p>The fraction stores the fractional part of the binary representation of the number.</p></li></ul><table tabindex="0"><thead><tr><th>Data</th><th>Single Precision</th><th>Double Precision</th></tr></thead><tbody><tr><td>Size</td><td>32 bits</td><td>64 bits</td></tr><tr><td>Exponent size</td><td>8 bits</td><td>11 bits</td></tr><tr><td>Fraction size</td><td>23 bits</td><td>52 bits</td></tr><tr><td>Bias</td><td>127</td><td>1023</td></tr></tbody></table><p><u>Note</u></p><ul><li>Since there are some numbers with non-ending decimal part in there binary representation ( For Example- ( 1 /3) 10 = (0.01 0011 0011 0011 ....) 2 ) and we have only limited bits to store the fraction part, there will be some slight inaccuracy while storing certain floating point numbers. Therefore, it is recommended to always use double, as it has a higher precision due to its increased no. of bits.</li></ul><h3 id="mips-floating-point-architecture" tabindex="-1"><strong>MIPS floating point architecture</strong> <a class="header-anchor" href="#mips-floating-point-architecture" aria-label="Permalink to &quot;**MIPS floating point architecture**&quot;">​</a></h3><p>In MIPS, all floating point calculations are computed in a separate processor, called co- processor 1.</p><p>The coprocessor contains 32 floating point registers, each of width 32 bits. The registers are numbered from $f 0 to $f3 1.</p><p>Each register is can store a single precision floating point number, while double precision is stored in 2 registers in an even-odd pair. For instructions concerning double precision numbers, the even numbered register is used in the instruction. Using an odd numbered register will throw an error.</p><p>In addition to the registers, there are 8 condition flags, which are used in floating point compare and branch instructions.</p><h4 id="floating-point-registers-in-mips" tabindex="-1"><strong>Floating point registers in MIPS</strong> <a class="header-anchor" href="#floating-point-registers-in-mips" aria-label="Permalink to &quot;**Floating point registers in MIPS**&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Registers</th><th>Usage</th></tr></thead><tbody><tr><td>$f0 - $f3</td><td>Used for results of floating point procedures</td></tr><tr><td>$f4 - $f11</td><td>Temporary floating point registers, whose values are NOT preserved across procedure calls</td></tr><tr><td>$f12 - $f15</td><td>Floating point parameters, whose values are NOT preserved across procedure calls</td></tr><tr><td>$f16 - $f19</td><td>More temporary floating point registers, whose values are NOT preserved across procedure calls</td></tr><tr><td>$f20 - $f31</td><td>Saved floating point registers, whose values are preserved across procedure calls</td></tr></tbody></table><p>Among the 32 registers, only $f 4 - $f 11 , $f 16 - $f 19 and $f 20 - $f 31 can be used by the programmer for storing values, as the others are reserved for special purposes.</p><p><u>Note</u></p><ul><li>Unlike the general purpose register $ 0 , $f 0 is not hardwired to be zero, and is used for storing results of procedures.</li></ul><h3 id="declaring-a-floating-point-number" tabindex="-1"><strong>Declaring a Floating point number</strong> <a class="header-anchor" href="#declaring-a-floating-point-number" aria-label="Permalink to &quot;**Declaring a Floating point number**&quot;">​</a></h3><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.data</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  num1:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .float </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  num2:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .double </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .align </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Since float has 2^2 bytes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  float_arr:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .space </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it has to be aligned to </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .align </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Since double has 2^3 bytes it has to be aligned to 3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  double_arr:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .space </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span></span></code></pre></div><h3 id="reading-and-printing-floating-point-numbers" tabindex="-1"><strong>Reading and Printing Floating point numbers</strong> <a class="header-anchor" href="#reading-and-printing-floating-point-numbers" aria-label="Permalink to &quot;**Reading and Printing Floating point numbers**&quot;">​</a></h3><p>Reading and printing a floating point number is similar to that of an integer, using syscall, only difference being in the $v0 value and parameter registers.</p><h4 id="single-precision" tabindex="-1"><strong>Single precision</strong> <a class="header-anchor" href="#single-precision" aria-label="Permalink to &quot;**Single precision**&quot;">​</a></h4><p>The $v0 value for reading a single precision floating point number is 6 while that of printing is 2.</p><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # The number is stored in $f0 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  mov</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.s $f12, $f0  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # The number to be printed is moved to $f12 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span></code></pre></div><h4 id="double-precision" tabindex="-1"><strong>Double precision</strong> <a class="header-anchor" href="#double-precision" aria-label="Permalink to &quot;**Double precision**&quot;">​</a></h4><p>The $v0 value for reading a double precision floating point number is 7 while that of printing is 3.</p><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # The number is stored in $f0/$f1 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  mov</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.d $f12, $f0  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # The number to be printed is </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     moved to $f12/$f13</span></span></code></pre></div><h3 id="data-movement-instructions" tabindex="-1"><strong>Data Movement Instructions</strong> <a class="header-anchor" href="#data-movement-instructions" aria-label="Permalink to &quot;**Data Movement Instructions**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Instruction</th><th>Syntax</th><th>Remarks</th></tr></thead><tbody><tr><td>Load single/double</td><td>l.s fdest, address l.d fdest, address</td><td>The single/double floating-point stored in address is loaded onto register fdest</td></tr><tr><td>Store single/double</td><td>s.s fsrc, address s.d fsrc, address</td><td>The single/double floating-point stored in register fsrc is stored to address</td></tr><tr><td>Move single/double</td><td>mov.s fdest, fsrc mov.d fdest, fsrc</td><td>The single/double floating-point stored in register fsrc is moved to register fdest</td></tr><tr><td>Move from coprocessor 1</td><td>mfc1 dest, fsrc</td><td>The 32 - bit data from floating register fsrc is copied to general purpose register dest</td></tr><tr><td>Move to coprocessor 1</td><td>mtc1 src, fdest</td><td>The 32 - bit data from general purpose register src is copied to floating point register fdest</td></tr></tbody></table><p><u>Note</u></p><ul><li>There is no load immediate for floating point. So if a constant is needed, it has to be stored in the data segment and loaded to the required register.</li><li>For the move to/from coprocessor 1 instructions, the first operand is a general purpose register and the second one is the floating point register.</li></ul><h3 id="arithmetic-instructions" tabindex="-1"><strong>Arithmetic Instructions</strong> <a class="header-anchor" href="#arithmetic-instructions" aria-label="Permalink to &quot;**Arithmetic Instructions**&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">Instruction</th><th>Syntax</th><th>Remarks</th></tr></thead><tbody><tr><td style="text-align:left;">Addition</td><td>add.s fdest, fsrc1, fsrc2 <br> add.d fdest, fsrc1, fsrc</td><td>The single/double floating-point numbers stored in fsrc1 and fsrc2 <br> are added and stored in register fdest</td></tr><tr><td style="text-align:left;">Subtraction</td><td>sub.s fdest, fsrc1, fsrc2 <br> sub.d fdest, fsrc1, fsrc2</td><td>The single/double floating-point number stored in fsrc <br> subtracted from fsrc1 and stored in register fdest</td></tr><tr><td style="text-align:left;">Multiplication</td><td>mul.s fdest, fsrc1, fsrc2 <br> mul.d fdest, fsrc1, fsrc2</td><td>The single/double floating-point numbers stored in fsrc1 and fsrc2 <br> are multiplied and stored in register fdest</td></tr><tr><td style="text-align:left;">Division</td><td>div.s fdest, fsrc1, fsrc2 <br> div.d fdest, fsrc1, fsrc</td><td>The single/double floating-point number stored in fsrc1 is divided by fsrc2 <br> and the quotient is stored in register fdest</td></tr><tr><td style="text-align:left;">Negation</td><td>neg.s fdest, fsrc <br> neg.d fdest, fsrc</td><td>The single/double floating-point number stored in fsrc <br> is negated (Sign changed) and stored in register fdest</td></tr><tr><td style="text-align:left;">Absolute value</td><td>abs.s fdest, fsrc <br> abs.d fdest, fsrc</td><td>Absolute value (Magnitude) of the single/double floating-point number stored in fsrc <br> is stored in register fdest</td></tr><tr><td style="text-align:left;">Square root</td><td>sqrt.s fdest, fsrc <br> sqrt.d fdest, fsrc</td><td>Square root of the single/double floating-point number stored in fsrc <br> is stored in register fdest</td></tr></tbody></table><h3 id="sample-question-1" tabindex="-1"><strong>Sample Question 1</strong> <a class="header-anchor" href="#sample-question-1" aria-label="Permalink to &quot;**Sample Question 1**&quot;">​</a></h3><p>Given a temperature in Fahrenheit, convert it into Celsius (Input and output has to be floating point values).</p><p>Temperature in degrees Celsius = (Temperature in degrees Fahrenheit - 32 ) * 5 / 9.</p><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Constants used for calculation </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  const1:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .double </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">32.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  const2:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .double </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  const3:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .double </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # User prompts </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  msg1:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .asciiz &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Enter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> the temperature </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Fahrenheit:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &quot; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  msg2:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .asciiz &quot;The temperature </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Celsius </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">is:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &quot; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.globl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> main </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    # Printing msg1 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $a0, msg1 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    # Reading user input </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  mov</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.d $f12, $f0             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $f12 = User Input </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  l.d $f14, const1            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $f12 = $f12 - 32 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  sub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.d $f12, $f12, $f14 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  l.d $f14, const2            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $f12 = $f12 * 5 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  mul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.d $f12, $f12, $f14 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  l.d $f14, const3            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $f12 = $f12 / 9 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.d $f12, $f12, $f14 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    # Printing msg2 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $a0, msg2 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    # Printing final answer </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                   # Exit </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span></code></pre></div><h2 id="comparison-branch-instructions" tabindex="-1"><strong>Comparison/Branch Instructions</strong> <a class="header-anchor" href="#comparison-branch-instructions" aria-label="Permalink to &quot;**Comparison/Branch Instructions**&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Instruction</th><th>Syntax</th><th>Remarks</th></tr></thead><tbody><tr><td>Compare equal</td><td>c.eq.s cc, fsrc1, fsrc2 <br> c.eq.s fsrc1, fsrc2 <br>c.eq.d cc, fsrc1, fsrc2 <br> c.eq.d fsrc1, fsrc2</td><td>Sets the condition flag cc as 1 if the numbers in fsrc1 <br> and fsrc2 are equal, 0 otherwise.</td></tr><tr><td>Compare less than</td><td>c.lt.s cc, fsrc1, fsrc2 <br> c.lt.s fsrc1, fsrc2 <br> c.lt.d cc, fsrc1, fsrc2 <br> c.lt.d fsrc1, fsrc2</td><td>Sets the condition flag cc as 1 if the number in fsrc1 <br> is less than that in fsrc2, 0 otherwise.</td></tr><tr><td>Compare less than or equal to</td><td>c.le.s cc, fsrc1, fsrc2 <br> c.le.s fsrc1, fsrc2 <br> c.le.d cc, fsrc1, fsrc2 <br> c.le.d fsrc1, fsrc</td><td>Sets the condition flag cc as 1 if the number in fsrc1 <br> is less thanor equal to that in fsrc2, 0 otherwise.</td></tr><tr><td>Branch if true</td><td>bc1t cc, label <br> bc1t label</td><td>Jumps to label if the condition flag cc is set as 1</td></tr><tr><td>Branch if false</td><td>bc1f cc, label <br> bc1f label</td><td>Jumps to label if the condition flag cc is set as 0</td></tr></tbody></table><p><u>Note</u></p><ul><li>The condition flag can be omitted in the above instructions, in which case condition flag 0 is taken as default.</li><li>As there is no comparison instruction for “Not equal to”, it has to be implemented by reversing the required branch condition Ex. We need to branch to label if $f4 and $f6 are not equal. This can be written as<div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  c.eq.d $f4, $f6</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  bc1.f label</span></span></code></pre></div></li><li>For greater than and greater than and equal to, it is simpler to reverse the input registers. Ex. We need to branch to label if $f4 if greater than $f6. This can be written as<div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  c.le.d $f6 , $f4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  bc1.t label</span></span></code></pre></div></li></ul><h3 id="sample-question-2" tabindex="-1"><strong>Sample Question 2</strong> <a class="header-anchor" href="#sample-question-2" aria-label="Permalink to &quot;**Sample Question 2**&quot;">​</a></h3><p>Given an array of floating numbers of size n, print the maximum and minimum element</p><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Array </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .align </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  arr:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .space </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Characters </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  newline:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .asciiz &quot;\\n&quot; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # User Prompts </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  msg1:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .asciiz &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Enter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> n:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &quot; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  msg2:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .asciiz &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Enter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> no. &quot; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  msg3:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .asciiz &quot;: &quot; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  msg4:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .asciiz &quot;The maximum no. </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">is:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &quot; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  msg5:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .asciiz &quot;The minimum no. </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">is:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &quot; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.globl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> main </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Print msg1 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $a0, msg1 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Read n </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  move $t0, $v0 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $t1, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # $t1 will be the loop variable  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               # going from 0,1,2.. </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $t2, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # $t2 will be the element indices </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               # going from 0,8,16.. </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  loop1:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                      # Loop to read n elements </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    beq $t0, $t1, end_loop1  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Termination condition </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 # Print msg2 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    la $a0, msg2 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 # Print position of                    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    move $a0, $t1            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # number to be inputted </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    addi $a0, $a0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 # Print msg3 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    la $a0, msg3 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 # Read input and  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    syscall</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                   # store in arr </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    s.d $f0, arr($t2) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    addi $t1, $t1, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # Increamenting #t1  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    addi $t2, $t2, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # and $t2 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    j loop1 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  end_loop1:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $t1, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Resetting $t1 and $t2 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $t2, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  l.d $f4, arr($zero) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $f4 stores the max value </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  l.d $f6, arr($zero) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $f6 stores the min value</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  loop2:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        # Loop to compute max and min </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    beq $t0, $t1, end_loop2    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Termination Condition </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    l.d $f8, arr($t2)          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Load a number from arr </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    c.lt.d $f4, $f8            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Compare if the number is  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                # greater than current max </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bc1f not_max  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      mov</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.d $f4, $f8           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # If yes then update new max </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    not_max:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    c.lt.d $f8, $f6            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Compare if the number is  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                # less than current min </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bc1f not_min </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      mov</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.d $f6, $f8           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # If yes then update new min </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    not_min:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    addi $t1, $t1, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # Incrementing $t1 and $t2 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    addi $t2, $t2, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    j loop2 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  end_loop2:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                      # Print msg4 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $a0, msg4 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                      # Print max number </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  mov</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.d $f12, $f4 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  i $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Print newline </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $a0, newline </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Print msg5 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $a0, msg5 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Print min number </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  mov</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.d $f12, $f6 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # Exit </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span></code></pre></div><h3 id="data-conversion-instructions" tabindex="-1"><strong>Data Conversion Instructions</strong> <a class="header-anchor" href="#data-conversion-instructions" aria-label="Permalink to &quot;**Data Conversion Instructions**&quot;">​</a></h3><h4 id="conversion-within-floating-point" tabindex="-1"><strong>Conversion within floating point</strong> <a class="header-anchor" href="#conversion-within-floating-point" aria-label="Permalink to &quot;**Conversion within floating point**&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Instruction</th><th>Syntax</th><th>Remarks</th></tr></thead><tbody><tr><td>Convert single to double</td><td>cvt.d.s fdest, fsrc</td><td>The single floating-point stored in fsrc is converted to double and stored in fdest</td></tr><tr><td>Convert double to single</td><td>cvt.s.d fdest, fsrc</td><td>The double floating-point stored in fsrc is converted to single and stored in fdest</td></tr></tbody></table><h3 id="conversion-to-integers" tabindex="-1"><strong>Conversion to integers</strong> <a class="header-anchor" href="#conversion-to-integers" aria-label="Permalink to &quot;**Conversion to integers**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Instruction</th><th>Syntax</th><th>Remarks</th></tr></thead><tbody><tr><td>Convert single to integer</td><td>cvt.w.s fdest, fsrc</td><td>The single floating-point stored in fsrc is converted to 32 bit integer (Ignoring the part after decimal point) <br> and stored in 2 ’s compliment form in fdest</td></tr><tr><td>Convert double to integer</td><td>cvt.w.d fdest, fsrc</td><td>The double floating-point stored in fsrc is converted to 32 bit integer (Ignoring the part after decimal point) and <br> stored in 2 ’s compliment form in fdest</td></tr></tbody></table><p><u> Note </u></p><ul><li>The output of the above two instructions is in 2 ’s compliment form, which should not be used with any other instructions other than mfc1. Other instructions always assume the data in registers are according to IEEE standards, which can cause errors.</li></ul><h4 id="conversion-from-integers" tabindex="-1"><strong>Conversion from integers</strong> <a class="header-anchor" href="#conversion-from-integers" aria-label="Permalink to &quot;**Conversion from integers**&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Instruction</th><th>Syntax</th><th>Remarks</th></tr></thead><tbody><tr><td>Convert integer to single</td><td>cvt.s.w fdest, fsrc</td><td>The data stored in fsrc is considered as an integer in 2 ’s compliment form and <br> is converted to single precision floating point and is stored in fdest</td></tr><tr><td>Convert integer to double</td><td>cvt.d.w fdest, fsrc</td><td>The data stored in fsrc is considered as an integer in 2 ’s compliment form and <br> is converted to double precision floating point and is stored in fdest</td></tr></tbody></table><h3 id="special-instructions" tabindex="-1"><strong>Special Instructions</strong> <a class="header-anchor" href="#special-instructions" aria-label="Permalink to &quot;**Special Instructions**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Instruction</th><th>Syntax</th><th>Remarks</th></tr></thead><tbody><tr><td>Ceiling</td><td>ceil.w.s fdest, fsrc <br> ceil.w.d fdest, fsrc</td><td>The smallest integer not greater than the floating point number in fsrc <br> is stored in fdest in 2 ’s compliment form</td></tr><tr><td>Floor</td><td>floor.w.s fdest, fsrc <br> floor.w.d fdest, fsrc</td><td>The greatest integer not smaller than the floating point number in fsrc <br> is stored in fdest in 2 ’s compliment form</td></tr><tr><td>Round to nearest integer</td><td>round.w.s fdest, fsrc <br> round.w.d fdest, fsrc</td><td>The floating-point stored in fsrc is rounded off to <br> nearest integer and stored in fdest in 2 ’s compliment form</td></tr></tbody></table><h3 id="sample-question-3" tabindex="-1"><strong>Sample Question 3</strong> <a class="header-anchor" href="#sample-question-3" aria-label="Permalink to &quot;**Sample Question 3**&quot;">​</a></h3><p>Given a floating point number and an integer n, round off the floating point number to n digits.</p><p><u> Hint- </u></p><p>Multiplty then given number with 10^n, and round off using round.w.d instruction. Divide the result by 10^n to obtain the final result.</p><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Constants used for calculation </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  const1:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .double </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  const2:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .double </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  const3:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .double </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # User prompts </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  msg1:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .asciiz &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Enter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> the number : &quot; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  msg2:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .asciiz &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Enter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number of digits to round off </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &quot; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  msg3:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .asciiz &quot;The rounded off number </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">is:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &quot; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.globl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> main </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # Print msg1 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $a0, msg1 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # Read number to round off </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  mov</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.d $f12, $f0   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $f12 = user input </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # Print msg2 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $a0, msg2 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # Read n </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  mov</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.d $f16, $f0   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $f16 = n </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  l.d $f4, const1   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $f4 used as a loop varibale </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                     # initialised to 0 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  l.d $f6, const2   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $f6 used to store 10^n </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  l.d $f8, const3   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $f8 used to store 10 for  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                     # calculating power </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  l.d $f10, const2  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $f10 used to store 1 for  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                     # incrementing loop variable </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  loop1:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Loop to compute 10^n </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    c.eq.d $f4, $f16 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Ternminaltion Condition </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bc1t end_loop1 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    mul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.d $f6, $f6, $f8</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $f6 = $f6 * 10 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.d $f4, $f4, $f10 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $f4 = $f4 + 1 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    j loop1 </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  end_loop1:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  mul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.d $f12, $f12, $f6 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $f12 = $f12 * (10^n) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  round.w.d $f12, $f12  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $f12 is rounded to nearest </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                         # integer </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cvt.d.w $f12, $f12    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Output after rounding,  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                         # which is a word, is  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                         # converted back to double </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.d $f12, $f12, $f6 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # $f12 = $f12 / (10^n) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Print msg3 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  la $a0, msg3 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Print final answer </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li $v0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # Exit </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  syscall</span></span></code></pre></div>`,111),l=[e];function h(p,r,k,d,o,E){return a(),i("div",null,l)}const y=s(t,[["render",h]]);export{c as __pageData,y as default};
